This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    TimeBlockGrid.jsx
  pages/
    CalendarView.jsx
    QuadrantView.jsx
    TaskList.jsx
    TimeBlockView.jsx
  services/
    csvService.js
    taskService.js
    timeBlockService.js
  App.jsx
  main.jsx
index.html
package.json
vite.config.js

================================================================
Files
================================================================

================
File: src/components/TimeBlockGrid.jsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Grid,
  Tooltip
} from '@mui/material';
import { Add as AddIcon, Label as LabelIcon } from '@mui/icons-material';
import { ChromePicker } from 'react-color';
import { getTimeBlocksByDate, updateTimeBlocks, getTimeBlockLabels, addTimeBlockLabel, deleteTimeBlockLabel } from '../services/timeBlockService';

const BLOCKS_PER_HOUR = 4; // 15分钟一个时间块
const HOURS_PER_DAY = 24;
const TOTAL_BLOCKS = BLOCKS_PER_HOUR * HOURS_PER_DAY;

function TimeBlockGrid({ date }) {
  const [timeBlocks, setTimeBlocks] = useState(Array(TOTAL_BLOCKS).fill(null));
  const [selectedBlock, setSelectedBlock] = useState(null);
  const [labels, setLabels] = useState([]);
  const [openLabelDialog, setOpenLabelDialog] = useState(false);
  const [newLabel, setNewLabel] = useState({ name: '', color: '#000000' });

  useEffect(() => {
    loadTimeBlocks();
    loadLabels();
  }, [date]);

  const loadTimeBlocks = async () => {
    const blocks = await getTimeBlocksByDate(date);
    setTimeBlocks(blocks.length ? blocks : Array(TOTAL_BLOCKS).fill(null));
  };

  const loadLabels = async () => {
    const allLabels = await getTimeBlockLabels();
    setLabels(allLabels);
  };

  const handleBlockClick = (index) => {
    setSelectedBlock(index);
  };

  const handleLabelSelect = async (label) => {
    if (selectedBlock !== null) {
      const newBlocks = [...timeBlocks];
      newBlocks[selectedBlock] = label;
      setTimeBlocks(newBlocks);
      await updateTimeBlocks(date, newBlocks);
      setSelectedBlock(null);
    }
  };

  const handleAddLabel = async () => {
    await addTimeBlockLabel(newLabel);
    setNewLabel({ name: '', color: '#000000' });
    setOpenLabelDialog(false);
    loadLabels();
  };

  const formatTime = (blockIndex) => {
    const hour = Math.floor(blockIndex / BLOCKS_PER_HOUR);
    const minute = (blockIndex % BLOCKS_PER_HOUR) * 15;
    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">时间块</Typography>
        <IconButton onClick={() => setOpenLabelDialog(true)}>
          <AddIcon />
        </IconButton>
      </Box>

      <Grid container spacing={0.5}>
        {timeBlocks.map((block, index) => (
          <Grid item xs={1} key={index}>
            <Tooltip title={formatTime(index)}>
              <Paper
                sx={{
                  height: 20,
                  backgroundColor: block?.color || '#f5f5f5',
                  cursor: 'pointer',
                  '&:hover': { opacity: 0.8 },
                  border: selectedBlock === index ? '2px solid #000' : 'none'
                }}
                onClick={() => handleBlockClick(index)}
              />
            </Tooltip>
          </Grid>
        ))}
      </Grid>

      {selectedBlock !== null && (
        <Paper sx={{ mt: 2, p: 2 }}>
          <Typography gutterBottom>
            选择标签 ({formatTime(selectedBlock)})
          </Typography>
          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            {labels.map((label) => (
              <Chip
                key={label.id}
                label={label.name}
                onClick={() => handleLabelSelect(label)}
                sx={{ backgroundColor: label.color, color: 'white' }}
              />
            ))}
          </Box>
        </Paper>
      )}

      <Dialog open={openLabelDialog} onClose={() => setOpenLabelDialog(false)}>
        <DialogTitle>添加新标签</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
            <TextField
              label="标签名称"
              value={newLabel.name}
              onChange={(e) => setNewLabel({ ...newLabel, name: e.target.value })}
              fullWidth
            />
            <Typography gutterBottom>选择颜色</Typography>
            <ChromePicker
              color={newLabel.color}
              onChange={(color) => setNewLabel({ ...newLabel, color: color.hex })}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenLabelDialog(false)}>取消</Button>
          <Button
            onClick={handleAddLabel}
            variant="contained"
            disabled={!newLabel.name}
          >
            添加
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default TimeBlockGrid;

================
File: src/pages/CalendarView.jsx
================
import React, { useState, useEffect } from 'react';
import { Box, Paper, Typography, Chip } from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import { getTasksByDate, TaskTypeColors } from '../services/taskService';

function CalendarView() {
  const [selectedDate, setSelectedDate] = useState(dayjs());
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    loadTasks();
  }, [selectedDate]);

  const loadTasks = async () => {
    const dayTasks = await getTasksByDate(selectedDate);
    setTasks(dayTasks);
  };

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        日历视图
      </Typography>
      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2 }}>
        <Paper sx={{ p: 2, flex: 1 }}>
          <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="zh-cn">
            <DateCalendar
              value={selectedDate}
              onChange={(newValue) => setSelectedDate(newValue)}
              sx={{ width: '100%' }}
            />
          </LocalizationProvider>
        </Paper>
        <Paper sx={{ p: 2, flex: 1 }}>
          <Typography variant="h6" gutterBottom>
            {selectedDate.format('YYYY年MM月DD日')}的任务
          </Typography>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            {tasks.length === 0 ? (
              <Typography color="text.secondary">暂无任务</Typography>
            ) : (
              tasks.map((task) => (
                <Chip
                  key={task.id}
                  label={task.title}
                  sx={{
                    backgroundColor: TaskTypeColors[task.type],
                    color: 'white',
                    '& .MuiChip-label': { whiteSpace: 'normal' }
                  }}
                  title={task.description}
                />
              ))
            )}
          </Box>
        </Paper>
      </Box>
    </Box>
  );
}

export default CalendarView;

================
File: src/pages/QuadrantView.jsx
================
import React, { useState, useEffect } from 'react';
import { Box, Grid, Paper, Typography, Chip } from '@mui/material';
import { getAllTasks, TaskType, TaskTypeColors, TaskTypeNames } from '../services/taskService';

function QuadrantView() {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    loadTasks();
  }, []);

  const loadTasks = async () => {
    const allTasks = await getAllTasks();
    setTasks(allTasks);
  };

  const getQuadrantTasks = (type) => {
    return tasks.filter(task => task.type === type);
  };

  const QuadrantBox = ({ type, title }) => (
    <Paper
      sx={{
        p: 2,
        height: '100%',
        backgroundColor: `${TaskTypeColors[type]}22`,
        display: 'flex',
        flexDirection: 'column',
        gap: 1
      }}
    >
      <Typography variant="h6" gutterBottom sx={{ color: TaskTypeColors[type] }}>
        {title}
      </Typography>
      {getQuadrantTasks(type).map((task) => (
        <Chip
          key={task.id}
          label={task.title}
          sx={{
            backgroundColor: TaskTypeColors[type],
            color: 'white',
            '& .MuiChip-label': { whiteSpace: 'normal' }
          }}
          title={`${task.description}\n截止日期: ${new Date(task.dueDate).toLocaleDateString()}`}
        />
      ))}
    </Paper>
  );

  return (
    <Box sx={{ height: '100%' }}>
      <Typography variant="h5" gutterBottom>
        四象限视图
      </Typography>
      <Grid container spacing={2} sx={{ height: 'calc(100% - 48px)' }}>
        <Grid item xs={12} md={6} sx={{ height: '50%' }}>
          <QuadrantBox
            type={TaskType.URGENT_IMPORTANT}
            title="紧急且重要"
          />
        </Grid>
        <Grid item xs={12} md={6} sx={{ height: '50%' }}>
          <QuadrantBox
            type={TaskType.URGENT_NOT_IMPORTANT}
            title="紧急不重要"
          />
        </Grid>
        <Grid item xs={12} md={6} sx={{ height: '50%' }}>
          <QuadrantBox
            type={TaskType.NOT_URGENT_IMPORTANT}
            title="重要不紧急"
          />
        </Grid>
        <Grid item xs={12} md={6} sx={{ height: '50%' }}>
          <QuadrantBox
            type={TaskType.NOT_URGENT_NOT_IMPORTANT}
            title="不紧急不重要"
          />
        </Grid>
      </Grid>
    </Box>
  );
}

export default QuadrantView;

================
File: src/pages/TaskList.jsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Chip
} from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, FileUpload as FileUploadIcon, FileDownload as FileDownloadIcon } from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import { getAllTasks, addTask, updateTask, deleteTask, TaskType, TaskTypeColors, TaskTypeNames } from '../services/taskService';
import { exportTasksToCSV, importTasksFromCSV } from '../services/csvService';

function TaskList() {
  const [tasks, setTasks] = useState([]);
  const [open, setOpen] = useState(false);
  const [editTask, setEditTask] = useState(null);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: TaskType.NOT_URGENT_NOT_IMPORTANT,
    startTime: dayjs(),
    dueDate: dayjs()
  });

  useEffect(() => {
    loadTasks();
  }, []);

  const loadTasks = async () => {
    const allTasks = await getAllTasks();
    setTasks(allTasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)));
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setEditTask(null);
    setFormData({
      title: '',
      description: '',
      type: TaskType.NOT_URGENT_NOT_IMPORTANT,
      startTime: dayjs(),
      dueDate: dayjs()
    });
  };

  const handleEdit = (task) => {
    setEditTask(task);
    setFormData({
      title: task.title,
      description: task.description,
      type: task.type,
      startTime: dayjs(task.startTime || new Date()),
      dueDate: dayjs(task.dueDate)
    });
    setOpen(true);
  };

  const handleDelete = async (taskId) => {
    if (window.confirm('确定要删除这个任务吗？')) {
      await deleteTask(taskId);
      loadTasks();
    }
  };

  const handleSubmit = async () => {
    const taskData = {
      title: formData.title,
      description: formData.description,
      type: formData.type,
      startTime: formData.startTime.toISOString(),
      dueDate: formData.dueDate.toISOString()
    };

    if (editTask) {
      await updateTask(editTask.id, taskData);
    } else {
      await addTask(taskData);
    }

    handleClose();
    loadTasks();
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5">任务列表</Typography>
        <Box>
          <input
            type="file"
            accept=".csv"
            style={{ display: 'none' }}
            id="csv-file-input"
            onChange={async (e) => {
              if (e.target.files?.length) {
                await importTasksFromCSV(e.target.files[0]);
                loadTasks();
                e.target.value = '';
              }
            }}
          />
          <Button
            startIcon={<FileUploadIcon />}
            onClick={() => document.getElementById('csv-file-input').click()}
          >
            导入
          </Button>
          <Button
            startIcon={<FileDownloadIcon />}
            onClick={exportTasksToCSV}
          >
            导出
          </Button>
        </Box>
      </Box>

      <List>
        {tasks.map((task) => (
          <ListItem
            key={task.id}
            secondaryAction={
              <Box>
                <IconButton edge="end" onClick={() => handleEdit(task)}>
                  <EditIcon />
                </IconButton>
                <IconButton edge="end" onClick={() => handleDelete(task.id)}>
                  <DeleteIcon />
                </IconButton>
              </Box>
            }
          >
            <ListItemText
              primary={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Typography>{task.title}</Typography>
                  <Chip
                    label={TaskTypeNames[task.type]}
                    size="small"
                    sx={{ backgroundColor: TaskTypeColors[task.type], color: 'white' }}
                  />
                </Box>
              }
              secondary={
                <React.Fragment>
                  <Typography variant="body2" color="text.secondary">
                    {task.description}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    开始时间: {new Date(task.startTime).toLocaleString()}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    截止时间: {new Date(task.dueDate).toLocaleString()}
                  </Typography>
                </React.Fragment>
              }
            />
          </ListItem>
        ))}
      </List>

      <Fab
        color="primary"
        sx={{ position: 'fixed', bottom: 80, right: 16 }}
        onClick={handleClickOpen}
      >
        <AddIcon />
      </Fab>

      <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
        <DialogTitle>{editTask ? '编辑任务' : '新建任务'}</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
            <TextField
              label="标题"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              fullWidth
              required
            />
            <TextField
              label="描述"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              fullWidth
              multiline
              rows={3}
            />
            <FormControl fullWidth>
              <InputLabel>任务类型</InputLabel>
              <Select
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                label="任务类型"
              >
                {Object.entries(TaskTypeNames).map(([type, name]) => (
                  <MenuItem key={type} value={type}>
                    {name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="zh-cn">
              <DatePicker
                label="开始时间"
                value={formData.startTime}
                onChange={(newValue) => setFormData({ ...formData, startTime: newValue })}
                slotProps={{ textField: { fullWidth: true } }}
              />
              <DatePicker
                label="截止时间"
                value={formData.dueDate}
                onChange={(newValue) => setFormData({ ...formData, dueDate: newValue })}
                slotProps={{ textField: { fullWidth: true } }}
              />
            </LocalizationProvider>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>取消</Button>
          <Button onClick={handleSubmit} variant="contained" disabled={!formData.title}>
            确定
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default TaskList;

================
File: src/pages/TimeBlockView.jsx
================
import React, { useState, useEffect } from 'react';
import { Box, Paper, Typography, Grid, Tooltip, Menu, MenuItem, Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField } from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import { getTimeBlocksByDate, updateTimeBlocks, updateTimeBlockNote, getAllTimeBlockStats } from '../services/timeBlockService';

const BLOCKS_PER_HOUR = 4; // 15分钟一个时间块
const HOURS_PER_DAY = 24;
const TOTAL_BLOCKS = BLOCKS_PER_HOUR * HOURS_PER_DAY;

const BLOCK_COLORS = {
  0: '#ff4d4f', // 红色
  1: '#faad14', // 黄色
  2: '#52c41a', // 绿色
};

function TimeBlockView() {
  const [selectedDate, setSelectedDate] = useState(dayjs());
  const [timeBlocks, setTimeBlocks] = useState(Array(TOTAL_BLOCKS).fill(null));
  const [isDragging, setIsDragging] = useState(false);
  const [currentColor, setCurrentColor] = useState(0);
  const [contextMenu, setContextMenu] = useState(null);
  const [selectedBlock, setSelectedBlock] = useState(null);
  const [noteDialogOpen, setNoteDialogOpen] = useState(false);
  const [currentNote, setCurrentNote] = useState('');
  const [colorStats, setColorStats] = useState({});

  useEffect(() => {
    loadTimeBlocks();
    loadColorStats();
  }, [selectedDate]);

  const loadColorStats = async () => {
    const stats = await getAllTimeBlockStats();
    setColorStats(stats);
  };

  const loadTimeBlocks = async () => {
    const blocks = await getTimeBlocksByDate(selectedDate);
    // 将返回的数据转换为简单的数组格式，提取 status
    const formattedBlocks = Array(TOTAL_BLOCKS).fill(null).map((_, index) => 
      blocks[index] && blocks[index].status !== undefined ? blocks[index].status : null
    );
    setTimeBlocks(formattedBlocks);
  };

  const handleContextMenu = (event, index) => {
    event.preventDefault();
    setContextMenu({ mouseX: event.clientX, mouseY: event.clientY });
    setSelectedBlock(index);
    setCurrentNote(timeBlocks[index]?.note || '');
  };

  const handleCloseContextMenu = () => {
    setContextMenu(null);
  };

  const handleOpenNoteDialog = () => {
    setNoteDialogOpen(true);
    handleCloseContextMenu();
  };

  const handleCloseNoteDialog = () => {
    setNoteDialogOpen(false);
    setSelectedBlock(null);
  };

  const handleSaveNote = async () => {
    if (selectedBlock !== null) {
      await updateTimeBlockNote(selectedDate, selectedBlock, currentNote);
      await loadTimeBlocks();
      handleCloseNoteDialog();
    }
  };

  const handleBlockClick = async (index) => {
    const newBlocks = [...timeBlocks];
    // 点击时切换颜色：null -> 0 -> 1 -> 2 -> null
    newBlocks[index] = newBlocks[index] === null ? 0 : (newBlocks[index] + 1) % 3 === 0 ? null : newBlocks[index] + 1;
    setTimeBlocks(newBlocks);
    setCurrentColor(newBlocks[index] === null ? 0 : newBlocks[index]);
    await updateTimeBlocks(selectedDate, newBlocks.map(status => ({ status: status === null ? null : status })));
  };

  const handleMouseDown = (index) => {
    setIsDragging(true);
    handleBlockClick(index);
  };

  const handleMouseEnter = async (index) => {
    if (isDragging) {
      const newBlocks = [...timeBlocks];
      newBlocks[index] = currentColor;
      setTimeBlocks(newBlocks);
      await updateTimeBlocks(selectedDate, newBlocks.map(status => ({ status: status === null ? null : status })));
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  useEffect(() => {
    document.addEventListener('mouseup', handleMouseUp);
    return () => document.removeEventListener('mouseup', handleMouseUp);
  }, []);

  const formatTime = (blockIndex) => {
    const hour = Math.floor(blockIndex / BLOCKS_PER_HOUR);
    const minute = (blockIndex % BLOCKS_PER_HOUR) * 15;
    const nextMinute = minute + 15;
    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}-${hour.toString().padStart(2, '0')}:${nextMinute.toString().padStart(2, '0')}`;
  };

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        时间块视图
      </Typography>
      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2 }}>
        <Paper sx={{ p: 2, flex: 1 }}>
          <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="zh-cn">
            <DateCalendar
              value={selectedDate}
              onChange={(newValue) => setSelectedDate(newValue)}
              sx={{ width: '100%' }}
              slots={{
                day: (props) => {
                  const dateStr = props.day.toISOString().split('T')[0];
                  const color = colorStats[dateStr] !== undefined ? BLOCK_COLORS[colorStats[dateStr]] : undefined;
                  return (
                    <div
                      onClick={props.onClick}
                      style={{
                        ...props.sx,
                        backgroundColor: color ? `${color}44` : undefined,
                        borderRadius: '50%',
                        cursor: 'pointer',
                        width: '2em',
                        height: '2em',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      {props.day.date()}
                    </div>
                  );
                }
              }}
            />
          </LocalizationProvider>
        </Paper>
        <Paper sx={{ p: 2, flex: 2 }}>
          <Typography variant="h6" gutterBottom>
            {selectedDate.format('YYYY年MM月DD日')}的时间块
          </Typography>
          <Grid container spacing={0.5}>
            {timeBlocks.map((status, index) => (
              <Grid item xs={1} key={index}>
                <Tooltip title={timeBlocks[index]?.note ? `${formatTime(index)} [${timeBlocks[index].note}]` : formatTime(index)}>
                  <Paper
                    sx={{
                      height: 20,
                      backgroundColor: status === null ? '#f0f0f0' : BLOCK_COLORS[status],
                      cursor: 'pointer',
                      '&:hover': { opacity: 0.8 },
                      border: '1px solid rgba(0, 0, 0, 0.1)',
                      transition: 'all 0.2s ease-in-out'
                    }}
                    onClick={() => handleBlockClick(index)}
                    onMouseDown={() => handleMouseDown(index)}
                    onMouseEnter={() => handleMouseEnter(index)}
                    onContextMenu={(e) => handleContextMenu(e, index)}
                  />
                </Tooltip>
              </Grid>
            ))}
          </Grid>
          <Box sx={{ mt: 2 }}>
            <Typography variant="body2" color="text.secondary">
              点击切换状态：灰色 → 红色 → 黄色 → 绿色 → 灰色
            </Typography>
          </Box>
        </Paper>
      </Box>

      <Menu
        open={contextMenu !== null}
        onClose={handleCloseContextMenu}
        anchorReference="anchorPosition"
        anchorPosition={
          contextMenu !== null
            ? { top: contextMenu.mouseY, left: contextMenu.mouseX }
            : undefined
        }
      >
        <MenuItem onClick={handleOpenNoteDialog}>添加/编辑备注</MenuItem>
      </Menu>

      <Dialog open={noteDialogOpen} onClose={handleCloseNoteDialog}>
        <DialogTitle>时间块备注 ({formatTime(selectedBlock || 0)})</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="备注内容"
            fullWidth
            multiline
            rows={4}
            value={currentNote}
            onChange={(e) => setCurrentNote(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseNoteDialog}>取消</Button>
          <Button onClick={handleSaveNote} variant="contained">保存</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default TimeBlockView;

================
File: src/services/csvService.js
================
import { getAllTasks, addTask } from './taskService';

// 将任务导出为CSV格式
export const exportTasksToCSV = async () => {
  try {
    const tasks = await getAllTasks();
    const headers = ['标题', '描述', '类型', '开始时间', '截止时间', '创建时间'];
    const rows = tasks.map(task => [
      task.title,
      task.description,
      task.type,
      task.startTime || '',
      task.dueDate,
      task.createdAt
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${(cell || '').replace(/"/g, '""')}"`).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `tasks_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    URL.revokeObjectURL(link.href);
  } catch (error) {
    console.error('导出任务失败:', error);
    throw error;
  }
};

// 从CSV文件导入任务
export const importTasksFromCSV = async (file) => {
  try {
    const text = await file.text();
    const lines = text.split('\n').map(line => line.trim()).filter(Boolean);
    const headers = lines[0].split(',');

    const tasks = lines.slice(1).map(line => {
      const values = line.split(',').map(value => 
        value.trim().replace(/^"|"$/g, '').replace(/""/g, '"')
      );
      
      return {
        title: values[0],
        description: values[1],
        type: values[2],
        startTime: values[3] || null,
        dueDate: values[4],
        createdAt: values[5]
      };
    });

    for (const task of tasks) {
      await addTask(task);
    }

    return tasks.length;
  } catch (error) {
    console.error('导入任务失败:', error);
    throw error;
  }
};

================
File: src/services/taskService.js
================
import { v4 as uuidv4 } from 'uuid';
import localforage from 'localforage';

// 任务类型枚举
export const TaskType = {
  URGENT_IMPORTANT: 'urgent_important',
  URGENT_NOT_IMPORTANT: 'urgent_not_important',
  NOT_URGENT_IMPORTANT: 'not_urgent_important',
  NOT_URGENT_NOT_IMPORTANT: 'not_urgent_not_important'
};

// 任务类型对应的颜色
export const TaskTypeColors = {
  [TaskType.URGENT_IMPORTANT]: '#d32f2f', // 红色 - 紧急且重要
  [TaskType.URGENT_NOT_IMPORTANT]: '#f57c00', // 橙色 - 紧急不重要
  [TaskType.NOT_URGENT_IMPORTANT]: '#0288d1', // 蓝色 - 重要不紧急
  [TaskType.NOT_URGENT_NOT_IMPORTANT]: '#388e3c' // 绿色 - 不紧急不重要
};

// 任务类型对应的中文名称
export const TaskTypeNames = {
  [TaskType.URGENT_IMPORTANT]: '紧急且重要',
  [TaskType.URGENT_NOT_IMPORTANT]: '紧急不重要',
  [TaskType.NOT_URGENT_IMPORTANT]: '重要不紧急',
  [TaskType.NOT_URGENT_NOT_IMPORTANT]: '不紧急不重要'
};

// 初始化存储
localforage.config({
  name: 'task-planner',
  storeName: 'tasks'
});

// 获取所有任务
export const getAllTasks = async () => {
  try {
    const tasks = await localforage.getItem('tasks');
    return tasks || [];
  } catch (error) {
    console.error('获取任务失败:', error);
    return [];
  }
};

// 添加新任务
export const addTask = async (task) => {
  try {
    const tasks = await getAllTasks();
    const newTask = {
      id: uuidv4(),
      createdAt: new Date().toISOString(),
      ...task
    };
    tasks.push(newTask);
    await localforage.setItem('tasks', tasks);
    return newTask;
  } catch (error) {
    console.error('添加任务失败:', error);
    throw error;
  }
};

// 更新任务
export const updateTask = async (taskId, updatedData) => {
  try {
    const tasks = await getAllTasks();
    const taskIndex = tasks.findIndex(task => task.id === taskId);
    
    if (taskIndex !== -1) {
      tasks[taskIndex] = { ...tasks[taskIndex], ...updatedData };
      await localforage.setItem('tasks', tasks);
      return tasks[taskIndex];
    }
    throw new Error('任务不存在');
  } catch (error) {
    console.error('更新任务失败:', error);
    throw error;
  }
};

// 删除任务
export const deleteTask = async (taskId) => {
  try {
    const tasks = await getAllTasks();
    const filteredTasks = tasks.filter(task => task.id !== taskId);
    await localforage.setItem('tasks', filteredTasks);
    return true;
  } catch (error) {
    console.error('删除任务失败:', error);
    throw error;
  }
};

// 按日期获取任务
export const getTasksByDate = async (date) => {
  try {
    const tasks = await getAllTasks();
    const dateString = new Date(date).toISOString().split('T')[0];
    
    return tasks.filter(task => {
      const taskDate = new Date(task.dueDate).toISOString().split('T')[0];
      return taskDate === dateString;
    });
  } catch (error) {
    console.error('按日期获取任务失败:', error);
    return [];
  }
};

================
File: src/services/timeBlockService.js
================
import { v4 as uuidv4 } from 'uuid';
import localforage from 'localforage';

// 初始化时间块存储
localforage.config({
  name: 'task-planner',
  storeName: 'time-blocks'
});

// 获取指定日期的时间块
export const getTimeBlocksByDate = async (date) => {
  try {
    const dateString = new Date(date).toISOString().split('T')[0];
    const timeBlocks = await localforage.getItem('time-blocks') || {};
    return timeBlocks[dateString] || Array(96).fill({ status: null, note: '' });
  } catch (error) {
    console.error('获取时间块失败:', error);
    return Array(96).fill({ status: null, note: '' });
  }
};

// 更新时间块备注
export const updateTimeBlockNote = async (date, blockIndex, note) => {
  try {
    const dateString = new Date(date).toISOString().split('T')[0];
    const timeBlocks = await localforage.getItem('time-blocks') || {};
    const blocks = timeBlocks[dateString] || Array(96).fill({ status: null, note: '' });
    blocks[blockIndex] = { ...blocks[blockIndex], note };
    timeBlocks[dateString] = blocks;
    await localforage.setItem('time-blocks', timeBlocks);
    return true;
  } catch (error) {
    console.error('更新时间块备注失败:', error);
    throw error;
  }
};

// 获取所有日期的时间块统计
export const getAllTimeBlockStats = async () => {
  try {
    const timeBlocks = await localforage.getItem('time-blocks') || {};
    const stats = {};
    
    Object.entries(timeBlocks).forEach(([date, blocks]) => {
      const colorCounts = blocks.reduce((acc, block) => {
        if (block.status !== null) {
          acc[block.status] = (acc[block.status] || 0) + 1;
        }
        return acc;
      }, {});
      
      let maxColor = null;
      let maxCount = 0;
      
      Object.entries(colorCounts).forEach(([color, count]) => {
        if (count > maxCount) {
          maxColor = parseInt(color);
          maxCount = count;
        }
      });
      
      stats[date] = maxColor;
    });
    
    return stats;
  } catch (error) {
    console.error('获取时间块统计失败:', error);
    return {};
  }
};

// 更新指定日期的时间块
export const updateTimeBlocks = async (date, blocks) => {
  try {
    const dateString = new Date(date).toISOString().split('T')[0];
    const timeBlocks = await localforage.getItem('time-blocks') || {};
    const existingBlocks = timeBlocks[dateString] || Array(96).fill({ status: null, note: '' });
    const updatedBlocks = blocks.map((block, index) => ({
      status: block.status,
      note: existingBlocks[index]?.note || ''
    }));
    timeBlocks[dateString] = updatedBlocks;
    await localforage.setItem('time-blocks', timeBlocks);
    return true;
  } catch (error) {
    console.error('更新时间块失败:', error);
    throw error;
  }
};

// 获取所有时间块标签
export const getTimeBlockLabels = async () => {
  try {
    const labels = await localforage.getItem('time-block-labels');
    return labels || [];
  } catch (error) {
    console.error('获取时间块标签失败:', error);
    return [];
  }
};

// 添加时间块标签
export const addTimeBlockLabel = async (label) => {
  try {
    const labels = await getTimeBlockLabels();
    const newLabel = {
      id: uuidv4(),
      createdAt: new Date().toISOString(),
      ...label
    };
    labels.push(newLabel);
    await localforage.setItem('time-block-labels', labels);
    return newLabel;
  } catch (error) {
    console.error('添加时间块标签失败:', error);
    throw error;
  }
};

// 删除时间块标签
export const deleteTimeBlockLabel = async (labelId) => {
  try {
    const labels = await getTimeBlockLabels();
    const filteredLabels = labels.filter(label => label.id !== labelId);
    await localforage.setItem('time-block-labels', filteredLabels);
    return true;
  } catch (error) {
    console.error('删除时间块标签失败:', error);
    throw error;
  }
};

================
File: src/App.jsx
================
import React from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import { Box, Container, Paper, BottomNavigation, BottomNavigationAction } from '@mui/material';
import { ListAlt, ViewModule, CalendarMonth, AccessTime } from '@mui/icons-material';
import { useState, useEffect } from 'react';

// 导入页面组件
import TaskList from './pages/TaskList';
import QuadrantView from './pages/QuadrantView';
import CalendarView from './pages/CalendarView';
import TimeBlockView from './pages/TimeBlockView';

function App() {
  const [value, setValue] = useState(0);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 600);

  // 监听窗口大小变化以响应式调整布局
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 600);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <Container maxWidth="lg" sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <Box sx={{ flexGrow: 1, overflow: 'auto', py: 2 }}>
        <Routes>
          <Route path="/" element={<TaskList />} />
          <Route path="/quadrant" element={<QuadrantView />} />
          <Route path="/calendar" element={<CalendarView />} />
          <Route path="/timeblock" element={<TimeBlockView />} />
        </Routes>
      </Box>

      <Paper sx={{ position: 'sticky', bottom: 0, left: 0, right: 0 }} elevation={3}>
        <BottomNavigation
          showLabels
          value={value}
          onChange={(event, newValue) => {
            setValue(newValue);
          }}
        >
          <BottomNavigationAction 
            component={Link} 
            to="/" 
            label="任务列表" 
            icon={<ListAlt />} 
          />
          <BottomNavigationAction 
            component={Link} 
            to="/quadrant" 
            label="四象限" 
            icon={<ViewModule />} 
          />
          <BottomNavigationAction 
            component={Link} 
            to="/calendar" 
            label="日历" 
            icon={<CalendarMonth />} 
          />
          <BottomNavigationAction 
            component={Link} 
            to="/timeblock" 
            label="时间块" 
            icon={<AccessTime />} 
          />
        </BottomNavigation>
      </Paper>
    </Container>
  );
}

export default App;

================
File: src/main.jsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { zhCN } from '@mui/material/locale';

// 创建主题
const theme = createTheme({
  palette: {
    mode: 'light',
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
    background: {
      default: '#f5f5f5',
    },
  },
  typography: {
    fontFamily: [
      '-apple-system',
      'BlinkMacSystemFont',
      '"Segoe UI"',
      'Roboto',
      '"Helvetica Neue"',
      'Arial',
      'sans-serif',
      '"Apple Color Emoji"',
      '"Segoe UI Emoji"',
      '"Segoe UI Symbol"',
    ].join(','),
  },
}, zhCN);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </ThemeProvider>
  </React.StrictMode>,
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>工作规划</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "task-planner",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.10",
    "@mui/material": "^5.14.10",
    "@mui/x-date-pickers": "^6.14.0",
    "dayjs": "^1.11.10",
    "localforage": "^1.10.0",
    "react": "^18.2.0",
    "react-color": "^2.19.3",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.16.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.4",
    "vite": "^4.4.9"
  }
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: false
  }
})



================================================================
End of Codebase
================================================================
